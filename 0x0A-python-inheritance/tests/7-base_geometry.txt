Importing the function from the module:
	>>> fig  = __import__("7-base_geometry").BaseGeometry

Checking for module docstring:
	 >>> m = __import__("7-base_geometry").__doc__
	 >>> len(m) > 1
	 True

Check for class docstring
    >>> f = __import__("7-base_geometry").BaseGeometry.__doc__
    >>> len(f) > 1
    True

Checking for method docstring
	>>> doc1 = __import__("7-base_geometry").BaseGeometry.area.__doc__
	>>> len(doc1) > 1
	True
	>>> doc2 = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
	>>> len(doc2) > 1
	True


Checkig that  area fails
	>>> base = fig()
	>>> base.area()
	Traceback (most recent call last):
	...
	Exception: area() is not implemented

Checking too many args for area
	>>> base.area(1)
	Traceback (most recent call last):
	TypeError: area() takes 1 positional argument but 2 were given

Checking integer validator for passing integer
	>>> base.integer_validator("hey", 8)

Check for negative number
	>>> base.integer_validator("hey", -5)
	Traceback (most recent call last):
	ValueError: hey must be greater than 0

Ceck for integer == 0
	>>> base.integer_validator("integer", 0)
	Traceback (most recent call last):
	ValueError: integer must be greater than 0

Check for non-integer types

	>>> base.integer_validator("float", 1.5)
	Traceback (most recent call last):
	TypeError: float must be an integer

	>>> base.integer_validator("string", "hola")
	Traceback (most recent call last):
	TypeError: string must be an integer

	>>> base.integer_validator("tuple", (1, 2))
	Traceback (most recent call last):
	...
	TypeError: tuple must be an integer

	>>> base.integer_validator("list", (1, 2))
	Traceback (most recent call last):
	...
	TypeError: list must be an integer

	>>> base.integer_validator("dict", {"key": "value"})
	Traceback (most recent call last):
	...
	TypeError: dict must be an integer

	>>> base.integer_validator("set", {"key", "value"})
	Traceback (most recent call last):
	...
	TypeError: set must be an integer

	>>> base.integer_validator("frozenset", frozenset(["hello", "world"]))
	Traceback (most recent call last):
	...
	TypeError: frozenset must be an integer

	>>> base.integer_validator("bytearrays", bytearray(b"bytes"))
	Traceback (most recent call last):
	...
	TypeError: bytearrays must be an integer

Checking for no arguments to integer_validator:
	 >>> base.integer_validator()
	 Traceback (most recent call last):
         ...
	 TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Checking for only 1 argument to integer_validator:
	 >>> base.integer_validator("integer")
	 Traceback (most recent call last):
         ...
	 TypeError: integer_validator() missing 1 required positional argument: 'value'

Checking for too many arguments:
	 >>> base.integer_validator("integer", 1, 2)
	 Traceback (most recent call last):
         ...
	 TypeError: integer_validator() takes 3 positional arguments but 4 were given





